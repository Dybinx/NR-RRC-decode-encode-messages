/* THIS FILE IS PART OF CODEC MESSAGE PROJECT ABOUT 3GPP 36.331
 * drx_config.h - this is the header file for message: DRX-Config
 *
 * THIS PROGRAM IS NOT FREE SOFTWARE.
 * YOU SHOULD HAVE RECEIVED A COPY OF LICENSE FROM BINXIAN DUAN, IF NOT, THE BEHAVIOR IS TORT!
 * Copyright (c) 2018 Binxian Duan <binxd@126.com>. All rights reserved.
 */
#ifndef _DRX_CONFIG_H_
#define _DRX_CONFIG_H_

#include "types.h"
#include "contants.h" 				
#include "handle_bits.h"


typedef enum {
	DRX_CONFIG_MILLISECONDS_MS1,
	DRX_CONFIG_MILLISECONDS_MS2,
	DRX_CONFIG_MILLISECONDS_MS3,
	DRX_CONFIG_MILLISECONDS_MS4,
	DRX_CONFIG_MILLISECONDS_MS5,
	DRX_CONFIG_MILLISECONDS_MS6,
	DRX_CONFIG_MILLISECONDS_MS8,
	DRX_CONFIG_MILLISECONDS_MS10,
	DRX_CONFIG_MILLISECONDS_MS20,
	DRX_CONFIG_MILLISECONDS_MS30,
	DRX_CONFIG_MILLISECONDS_MS40,
	DRX_CONFIG_MILLISECONDS_MS50,
	DRX_CONFIG_MILLISECONDS_MS60,
	DRX_CONFIG_MILLISECONDS_MS80,
	DRX_CONFIG_MILLISECONDS_MS100,
	DRX_CONFIG_MILLISECONDS_MS200,
	DRX_CONFIG_MILLISECONDS_MS300,
	DRX_CONFIG_MILLISECONDS_MS400,
	DRX_CONFIG_MILLISECONDS_MS500,
	DRX_CONFIG_MILLISECONDS_MS600,
	DRX_CONFIG_MILLISECONDS_MS800,
	DRX_CONFIG_MILLISECONDS_MS1000,
	DRX_CONFIG_MILLISECONDS_MS1200,
	DRX_CONFIG_MILLISECONDS_MS1600,
	DRX_CONFIG_MILLISECONDS_SPARE8,
	DRX_CONFIG_MILLISECONDS_SPARE7,
	DRX_CONFIG_MILLISECONDS_SPARE6,
	DRX_CONFIG_MILLISECONDS_SPARE5,
	DRX_CONFIG_MILLISECONDS_SPARE4,
	DRX_CONFIG_MILLISECONDS_SPARE3,
	DRX_CONFIG_MILLISECONDS_SPARE2,
	DRX_CONFIG_MILLISECONDS_SPARE1,
	DRX_CONFIG_MILLISECONDS_max = 0x7FFFFFFF
}DRX_Config_milliSeconds_e;


typedef enum {
	DRX_CONFIG_DRX_ONDURATIONTIMER_SUBMILLISECONDS,
	DRX_CONFIG_DRX_ONDURATIONTIMER_MILLISECONDS,
	DRX_CONFIG_DRX_ONDURATIONTIMER_max = 0x7FFFFFFF
}DRX_Config_drx_onDurationTimer_e;


/* union corresponding asn: DRX_Config_drx_onDurationTimer */
typedef union {
	uint32                                                             subMilliSeconds;
	DRX_Config_milliSeconds_e                                          milliSeconds;
}DRX_Config_drx_onDurationTimer_u;


/* struct corresponding asn: DRX_Config_drx_onDurationTimer */
typedef struct {
	DRX_Config_drx_onDurationTimer_e                                   type;
	DRX_Config_drx_onDurationTimer_u                                   a;
}DRX_Config_drx_onDurationTimer_t;


typedef enum {
	DRX_CONFIG_DRX_INACTIVITYTIMER_MS0,
	DRX_CONFIG_DRX_INACTIVITYTIMER_MS1,
	DRX_CONFIG_DRX_INACTIVITYTIMER_MS2,
	DRX_CONFIG_DRX_INACTIVITYTIMER_MS3,
	DRX_CONFIG_DRX_INACTIVITYTIMER_MS4,
	DRX_CONFIG_DRX_INACTIVITYTIMER_MS5,
	DRX_CONFIG_DRX_INACTIVITYTIMER_MS6,
	DRX_CONFIG_DRX_INACTIVITYTIMER_MS8,
	DRX_CONFIG_DRX_INACTIVITYTIMER_MS10,
	DRX_CONFIG_DRX_INACTIVITYTIMER_MS20,
	DRX_CONFIG_DRX_INACTIVITYTIMER_MS30,
	DRX_CONFIG_DRX_INACTIVITYTIMER_MS40,
	DRX_CONFIG_DRX_INACTIVITYTIMER_MS50,
	DRX_CONFIG_DRX_INACTIVITYTIMER_MS60,
	DRX_CONFIG_DRX_INACTIVITYTIMER_MS80,
	DRX_CONFIG_DRX_INACTIVITYTIMER_MS100,
	DRX_CONFIG_DRX_INACTIVITYTIMER_MS200,
	DRX_CONFIG_DRX_INACTIVITYTIMER_MS300,
	DRX_CONFIG_DRX_INACTIVITYTIMER_MS500,
	DRX_CONFIG_DRX_INACTIVITYTIMER_MS750,
	DRX_CONFIG_DRX_INACTIVITYTIMER_MS1280,
	DRX_CONFIG_DRX_INACTIVITYTIMER_MS1920,
	DRX_CONFIG_DRX_INACTIVITYTIMER_MS2560,
	DRX_CONFIG_DRX_INACTIVITYTIMER_SPARE9,
	DRX_CONFIG_DRX_INACTIVITYTIMER_SPARE8,
	DRX_CONFIG_DRX_INACTIVITYTIMER_SPARE7,
	DRX_CONFIG_DRX_INACTIVITYTIMER_SPARE6,
	DRX_CONFIG_DRX_INACTIVITYTIMER_SPARE5,
	DRX_CONFIG_DRX_INACTIVITYTIMER_SPARE4,
	DRX_CONFIG_DRX_INACTIVITYTIMER_SPARE3,
	DRX_CONFIG_DRX_INACTIVITYTIMER_SPARE2,
	DRX_CONFIG_DRX_INACTIVITYTIMER_SPARE1,
	DRX_CONFIG_DRX_INACTIVITYTIMER_max = 0x7FFFFFFF
}DRX_Config_drx_InactivityTimer_e;


typedef enum {
	DRX_CONFIG_DRX_RETRANSMISSIONTIMERDL_SL0,
	DRX_CONFIG_DRX_RETRANSMISSIONTIMERDL_SL1,
	DRX_CONFIG_DRX_RETRANSMISSIONTIMERDL_SL2,
	DRX_CONFIG_DRX_RETRANSMISSIONTIMERDL_SL4,
	DRX_CONFIG_DRX_RETRANSMISSIONTIMERDL_SL6,
	DRX_CONFIG_DRX_RETRANSMISSIONTIMERDL_SL8,
	DRX_CONFIG_DRX_RETRANSMISSIONTIMERDL_SL16,
	DRX_CONFIG_DRX_RETRANSMISSIONTIMERDL_SL24,
	DRX_CONFIG_DRX_RETRANSMISSIONTIMERDL_SL33,
	DRX_CONFIG_DRX_RETRANSMISSIONTIMERDL_SL40,
	DRX_CONFIG_DRX_RETRANSMISSIONTIMERDL_SL64,
	DRX_CONFIG_DRX_RETRANSMISSIONTIMERDL_SL80,
	DRX_CONFIG_DRX_RETRANSMISSIONTIMERDL_SL96,
	DRX_CONFIG_DRX_RETRANSMISSIONTIMERDL_SL112,
	DRX_CONFIG_DRX_RETRANSMISSIONTIMERDL_SL128,
	DRX_CONFIG_DRX_RETRANSMISSIONTIMERDL_SL160,
	DRX_CONFIG_DRX_RETRANSMISSIONTIMERDL_SL320,
	DRX_CONFIG_DRX_RETRANSMISSIONTIMERDL_SPARE15,
	DRX_CONFIG_DRX_RETRANSMISSIONTIMERDL_SPARE14,
	DRX_CONFIG_DRX_RETRANSMISSIONTIMERDL_SPARE13,
	DRX_CONFIG_DRX_RETRANSMISSIONTIMERDL_SPARE12,
	DRX_CONFIG_DRX_RETRANSMISSIONTIMERDL_SPARE11,
	DRX_CONFIG_DRX_RETRANSMISSIONTIMERDL_SPARE10,
	DRX_CONFIG_DRX_RETRANSMISSIONTIMERDL_SPARE9,
	DRX_CONFIG_DRX_RETRANSMISSIONTIMERDL_SPARE8,
	DRX_CONFIG_DRX_RETRANSMISSIONTIMERDL_SPARE7,
	DRX_CONFIG_DRX_RETRANSMISSIONTIMERDL_SPARE6,
	DRX_CONFIG_DRX_RETRANSMISSIONTIMERDL_SPARE5,
	DRX_CONFIG_DRX_RETRANSMISSIONTIMERDL_SPARE4,
	DRX_CONFIG_DRX_RETRANSMISSIONTIMERDL_SPARE3,
	DRX_CONFIG_DRX_RETRANSMISSIONTIMERDL_SPARE2,
	DRX_CONFIG_DRX_RETRANSMISSIONTIMERDL_SPARE1,
	DRX_CONFIG_DRX_RETRANSMISSIONTIMERDL_max = 0x7FFFFFFF
}DRX_Config_drx_RetransmissionTimerDL_e;


typedef enum {
	DRX_CONFIG_DRX_RETRANSMISSIONTIMERUL_SL0,
	DRX_CONFIG_DRX_RETRANSMISSIONTIMERUL_SL1,
	DRX_CONFIG_DRX_RETRANSMISSIONTIMERUL_SL2,
	DRX_CONFIG_DRX_RETRANSMISSIONTIMERUL_SL4,
	DRX_CONFIG_DRX_RETRANSMISSIONTIMERUL_SL6,
	DRX_CONFIG_DRX_RETRANSMISSIONTIMERUL_SL8,
	DRX_CONFIG_DRX_RETRANSMISSIONTIMERUL_SL16,
	DRX_CONFIG_DRX_RETRANSMISSIONTIMERUL_SL24,
	DRX_CONFIG_DRX_RETRANSMISSIONTIMERUL_SL33,
	DRX_CONFIG_DRX_RETRANSMISSIONTIMERUL_SL40,
	DRX_CONFIG_DRX_RETRANSMISSIONTIMERUL_SL64,
	DRX_CONFIG_DRX_RETRANSMISSIONTIMERUL_SL80,
	DRX_CONFIG_DRX_RETRANSMISSIONTIMERUL_SL96,
	DRX_CONFIG_DRX_RETRANSMISSIONTIMERUL_SL112,
	DRX_CONFIG_DRX_RETRANSMISSIONTIMERUL_SL128,
	DRX_CONFIG_DRX_RETRANSMISSIONTIMERUL_SL160,
	DRX_CONFIG_DRX_RETRANSMISSIONTIMERUL_SL320,
	DRX_CONFIG_DRX_RETRANSMISSIONTIMERUL_SPARE15,
	DRX_CONFIG_DRX_RETRANSMISSIONTIMERUL_SPARE14,
	DRX_CONFIG_DRX_RETRANSMISSIONTIMERUL_SPARE13,
	DRX_CONFIG_DRX_RETRANSMISSIONTIMERUL_SPARE12,
	DRX_CONFIG_DRX_RETRANSMISSIONTIMERUL_SPARE11,
	DRX_CONFIG_DRX_RETRANSMISSIONTIMERUL_SPARE10,
	DRX_CONFIG_DRX_RETRANSMISSIONTIMERUL_SPARE9,
	DRX_CONFIG_DRX_RETRANSMISSIONTIMERUL_SPARE8,
	DRX_CONFIG_DRX_RETRANSMISSIONTIMERUL_SPARE7,
	DRX_CONFIG_DRX_RETRANSMISSIONTIMERUL_SPARE6,
	DRX_CONFIG_DRX_RETRANSMISSIONTIMERUL_SPARE5,
	DRX_CONFIG_DRX_RETRANSMISSIONTIMERUL_SPARE4,
	DRX_CONFIG_DRX_RETRANSMISSIONTIMERUL_SPARE3,
	DRX_CONFIG_DRX_RETRANSMISSIONTIMERUL_SPARE2,
	DRX_CONFIG_DRX_RETRANSMISSIONTIMERUL_SPARE1,
	DRX_CONFIG_DRX_RETRANSMISSIONTIMERUL_max = 0x7FFFFFFF
}DRX_Config_drx_RetransmissionTimerUL_e;


typedef enum {
	DRX_CONFIG_DRX_LONGCYCLESTARTOFFSET_MS10,
	DRX_CONFIG_DRX_LONGCYCLESTARTOFFSET_MS20,
	DRX_CONFIG_DRX_LONGCYCLESTARTOFFSET_MS32,
	DRX_CONFIG_DRX_LONGCYCLESTARTOFFSET_MS40,
	DRX_CONFIG_DRX_LONGCYCLESTARTOFFSET_MS60,
	DRX_CONFIG_DRX_LONGCYCLESTARTOFFSET_MS64,
	DRX_CONFIG_DRX_LONGCYCLESTARTOFFSET_MS70,
	DRX_CONFIG_DRX_LONGCYCLESTARTOFFSET_MS80,
	DRX_CONFIG_DRX_LONGCYCLESTARTOFFSET_MS128,
	DRX_CONFIG_DRX_LONGCYCLESTARTOFFSET_MS160,
	DRX_CONFIG_DRX_LONGCYCLESTARTOFFSET_MS256,
	DRX_CONFIG_DRX_LONGCYCLESTARTOFFSET_MS320,
	DRX_CONFIG_DRX_LONGCYCLESTARTOFFSET_MS512,
	DRX_CONFIG_DRX_LONGCYCLESTARTOFFSET_MS640,
	DRX_CONFIG_DRX_LONGCYCLESTARTOFFSET_MS1024,
	DRX_CONFIG_DRX_LONGCYCLESTARTOFFSET_MS1280,
	DRX_CONFIG_DRX_LONGCYCLESTARTOFFSET_MS2048,
	DRX_CONFIG_DRX_LONGCYCLESTARTOFFSET_MS2560,
	DRX_CONFIG_DRX_LONGCYCLESTARTOFFSET_MS5120,
	DRX_CONFIG_DRX_LONGCYCLESTARTOFFSET_MS10240,
	DRX_CONFIG_DRX_LONGCYCLESTARTOFFSET_max = 0x7FFFFFFF
}DRX_Config_drx_LongCycleStartOffset_e;


/* union corresponding asn: DRX_Config_drx_LongCycleStartOffset */
typedef union {
	uint32                                                             ms10;
	uint32                                                             ms20;
	uint32                                                             ms32;
	uint32                                                             ms40;
	uint32                                                             ms60;
	uint32                                                             ms64;
	uint32                                                             ms70;
	uint32                                                             ms80;
	uint32                                                             ms128;
	uint32                                                             ms160;
	uint32                                                             ms256;
	uint32                                                             ms320;
	uint32                                                             ms512;
	uint32                                                             ms640;
	uint32                                                             ms1024;
	uint32                                                             ms1280;
	uint32                                                             ms2048;
	uint32                                                             ms2560;
	uint32                                                             ms5120;
	uint32                                                             ms10240;
}DRX_Config_drx_LongCycleStartOffset_u;


/* struct corresponding asn: DRX_Config_drx_LongCycleStartOffset */
typedef struct {
	DRX_Config_drx_LongCycleStartOffset_e                              type;
	DRX_Config_drx_LongCycleStartOffset_u                              a;
}DRX_Config_drx_LongCycleStartOffset_t;


typedef enum {
	DRX_CONFIG_DRX_SHORTCYCLE_MS2,
	DRX_CONFIG_DRX_SHORTCYCLE_MS3,
	DRX_CONFIG_DRX_SHORTCYCLE_MS4,
	DRX_CONFIG_DRX_SHORTCYCLE_MS5,
	DRX_CONFIG_DRX_SHORTCYCLE_MS6,
	DRX_CONFIG_DRX_SHORTCYCLE_MS7,
	DRX_CONFIG_DRX_SHORTCYCLE_MS8,
	DRX_CONFIG_DRX_SHORTCYCLE_MS10,
	DRX_CONFIG_DRX_SHORTCYCLE_MS14,
	DRX_CONFIG_DRX_SHORTCYCLE_MS16,
	DRX_CONFIG_DRX_SHORTCYCLE_MS20,
	DRX_CONFIG_DRX_SHORTCYCLE_MS30,
	DRX_CONFIG_DRX_SHORTCYCLE_MS32,
	DRX_CONFIG_DRX_SHORTCYCLE_MS35,
	DRX_CONFIG_DRX_SHORTCYCLE_MS40,
	DRX_CONFIG_DRX_SHORTCYCLE_MS64,
	DRX_CONFIG_DRX_SHORTCYCLE_MS80,
	DRX_CONFIG_DRX_SHORTCYCLE_MS128,
	DRX_CONFIG_DRX_SHORTCYCLE_MS160,
	DRX_CONFIG_DRX_SHORTCYCLE_MS256,
	DRX_CONFIG_DRX_SHORTCYCLE_MS320,
	DRX_CONFIG_DRX_SHORTCYCLE_MS512,
	DRX_CONFIG_DRX_SHORTCYCLE_MS640,
	DRX_CONFIG_DRX_SHORTCYCLE_SPARE9,
	DRX_CONFIG_DRX_SHORTCYCLE_SPARE8,
	DRX_CONFIG_DRX_SHORTCYCLE_SPARE7,
	DRX_CONFIG_DRX_SHORTCYCLE_SPARE6,
	DRX_CONFIG_DRX_SHORTCYCLE_SPARE5,
	DRX_CONFIG_DRX_SHORTCYCLE_SPARE4,
	DRX_CONFIG_DRX_SHORTCYCLE_SPARE3,
	DRX_CONFIG_DRX_SHORTCYCLE_SPARE2,
	DRX_CONFIG_DRX_SHORTCYCLE_SPARE1,
	DRX_CONFIG_DRX_SHORTCYCLE_max = 0x7FFFFFFF
}DRX_Config_drx_ShortCycle_e;


typedef struct {
	DRX_Config_drx_ShortCycle_e                                        drx_ShortCycle;
	uint32                                                             drx_ShortCycleTimer;
}DRX_Config_shortDRX_t;


typedef struct {
	DRX_Config_drx_onDurationTimer_t                                   drx_onDurationTimer;
	DRX_Config_drx_InactivityTimer_e                                   drx_InactivityTimer;
	uint32                                                             drx_HARQ_RTT_TimerDL;
	uint32                                                             drx_HARQ_RTT_TimerUL;
	DRX_Config_drx_RetransmissionTimerDL_e                             drx_RetransmissionTimerDL;
	DRX_Config_drx_RetransmissionTimerUL_e                             drx_RetransmissionTimerUL;
	DRX_Config_drx_LongCycleStartOffset_t                              drx_LongCycleStartOffset;
	BOOLEAN                                                            shortDRX_exist;
	DRX_Config_shortDRX_t                                              shortDRX;
	uint32                                                             drx_SlotOffset;
}DRX_Config_t;


extern void EncodeDRX_Config(
	DRX_Config_t *i_encoded_field, 
	uint8 *buff, 
	BitsIter *bits_iter, 
	void *asn_error);
extern void DecodeDRX_Config(
	DRX_Config_t *o_decoded_field, 
	uint8 *buff, 
	BitsIter *bits_iter, 
	void *asn_error);

#endif
